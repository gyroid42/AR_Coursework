/* SCE CONFIDENTIAL
 PlayStation(R)Vita Programmer Tool Runtime Library Release 02.100.071
 * Copyright (C) 2011 Sony Computer Entertainment Inc.
 * All Rights Reserved.
 */

 /// @file sony_tracking.h
 
#ifndef _SONY_TRACKING_H
#define _SONY_TRACKING_H

#include <gxm.h>
#include <libsmart.h>
#include <smart/scene_mapping.h>

#ifdef __cplusplus
extern "C"
{
#endif


	/// @brief Initialise the smart tracking library.
	void sampleInitialize();

	/// @brief Release resources used by the smart tracking library.
	void sampleRelease();
	
	
	/// @brief Release resources used by the smart tracking library.
	/// @Call this once a frame with your application update.
	void sampleUpdate();
	
	/// @brief Initialises smart tracking library for rendering the camera image.
	/// @Call this once a frame in your application Render before drawing the camera feed.
	void sampleRenderBegin();


	/// @brief Indicates the smart tracking library that rendering the camera image is finished.
	/// \deprecated This function no longer does anything. No need to call it.
	void sampleRenderEnd();

	
	/// @brief Check if the camera image texture is ready to use.
	/// @return true if the camera image texture is ready to use, otherwise return false.
	bool sampleIsCameraImageReady();

	/// @brief Get the texture containing the camera image.
	/// @return the texture containing the camera image.
	SceGxmTexture sampleGetCameraImageTexture();

	/// @brief Get the current state of the scene mapping process.
	/// @return the current state of the scene mapping process.
	SceSmartSceneMappingState sampleGetSceneMappingState();

	/// @brief Reset the scene mapping process and start searching for landmarks.
	/// @note Call this in the application update before sampleUpdate().
	void sampleSceneMappingReset();
	
	/// @brief Change the scene mapping mode to the next mode.
	void sampleSceneMappingChangeMode();
	
	
	/// @brief Saves the scene mapping data to file.
	/// @note NOT TESTED. USE AT OWN RISK.
	void sampleSceneMappingSaveMap();
	
	/// @brief Get the number of landmarks found by the scene mapping process.
	/// @return the number of landmarks found by the scene mapping process.
	int sampleGetNumLandmarks();

	/// @brief Get information about a particular landmark.
	/// @param[in] landmark_num		The landmark number.
	/// @return the landmark data.
	SceSmartSceneMappingLandmarkInfo sampleGetLandmarkInfo(int landmark_num);

	/// @brief Gets the tracking state of a particular marker.
	/// @param[in] idx		The marker number [0..5]
	/// @return true if the marker is current being tracked, otherwise return false.
	bool sampleTargetDetected(int idx);

	/// @brief Get the scene mapping initialisation mode from the smart tracking library.
	/// @return the scene mapping initialisation mode from the smart tracking library.
	SceSmartSceneMappingInitMode sampleGetSceneMappingInitMode();

#ifdef __cplusplus
} // extern "C"
#endif

/// @brief Get the view matrix generated by the smart tracking library.
/// @param[out] mat		The view matrix generated by the smart tracking library.
void sampleGetViewMatrix(gef::Matrix44* mat);

/// @brief Get the transformation matrix for a particular marker that is being tracked.
/// @note This transformation matrix is in the world coordinate system
void sampleGetTargetTransform(int idx,	gef::Matrix44* matrix);


#endif // _SONY_TRACKING_H